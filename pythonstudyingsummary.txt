1. 프로그래밍이란?

컴퓨터가 알아듣는 말로 소프트웨어를 만드는 것이 프로그래밍이라고 할 수 있다.

그리고 컴퓨터가 알아들을 수 있는 말을 프로그래밍 언어 라고한다.

1. 파이썬이란 무엇인가?

---

- 데이터 분석과 인공 지능 붐과 함께 파이썬에 대한 관심이 늘고 있고, 주목할만한 언어 라고 할 수 있다.
- 배우기 쉬우면서, 공동작업과 유지보수가 쉽다는 특징을 가지고 있어 많은 프로그램과 모듈이 파이썬으로 재구성 되고 있다.
- 하지만 오히려 자바보다 역사가 오래되어 숙성된 언어이다.
- 처음부터 너무 어려운 언어나 특정 기술에 특화된 언어를 선택 할 경우 우물안의 개구리가 될 수 있는데, 파이썬은 프로그래밍의 핵심적 개념을 정말 쉽게 배울 수 있으며, 타 기술 스택을 쌓을때도 고급스러워지게 하는 효과를 발휘하곤 한다.
- 1990년 암스테르담의 귀도반 로섬에 의해 탄생했다.
- 구글에서 만든 소프트웨어의 50퍼센트 이상이 파이썬으로 작성되었고 인스타나 드롭박스등에도 많이 활용 되었다.

---

2-1 파이썬만의 특징

- 인간다운 언어이기 떄문에 굳이 컴퓨터의 사고체계에 맞추어 프로그래밍을 하려 애쓸 필요가 없다. 마치 영어 문장을 쓰는 듯한 착각에 빠져든다.
- 오픈소스 이지만 강력하다. 시스템 프로그래밍이나 하드웨어 제어와 같은 매우 복잡한 연산은 어울리지 않으나, 다른 언어로 만든 프로그램을 파이썬 프로그램에 포함 시킬 수 있다. 즉 전반적 뼈대는 파이썬으로 만들고, 빠른 실행 속도가 필요한 부분은 C로 만들 수 있다. 파이썬 라이브러리 중에는 C로 만들어진 것도 많다.
- 다른 언어에서 보게되는 단락구분의 괄호가 없이 줄을 맞춰 단락을 구분하기 때문에 자연스럽게 예쁘게 작성하게 되고 이는 가독성에 큰 도움이 된다.

---

2-2 파이썬으로 할 수 있는 것.

각 언어에는 장점들과 단점이 존재한다. 파이썬이 주로 할 수 있는 것은 무 엇일까?

- 운영체제의 시스템 명령어를 사용할 수 있는 각종 도구를 갖추고 있기때문에 시스템 유틸리티(컴퓨터 사용에 도움을 주는 여러 소프트웨어)를 만드는데 유리하다.
- GUI 프로그래밍에 유리하다. GUI 프로그래밍이란 화면에 또다른 윈도창을 띄워 그 창에 메뉴나 버튼 그림등을 추가하는 것이다. 파이썬은 gui프로그래밍을 위한 도구들이 잘 갖추어져 있으며 대표적 예로 TKinter가 있다.
- 파이썬은 접착 언어라고도 한다. C나 C++로 만든 프로그램을 파이썬에서 사용할 수 있으며 역도 마찬가지다.
- 웹 프로그램을 만들기에 매우 적합한 도구이며 파이썬으로 제작 된 웹 사이트는 셀 수 없을 정도로 많다.
- 수치연산은 c같은 언어에서 더 적합하나 파이썬은 c로 작성된 numpy라는 수치연산 모듈을 제공하기 떄문에 파이썬에서도 수치연산을 더 빠르게 할 수 있다.
- 데이터 베이스에 접근하기 위한 각종 도구들을 제공한다. 이런 굵직한 데이터 베이스를 직접 사용하는 것 외에도 pickle이라는 재밌는 모듈로 사용하는 자료를 변형없이 저장하고 불러오는 일을 할 수 있다.
- 데이터분석, 사물인터넷. 판다스 모듈을 사용하면 데이터 분석을 더 효과적으로로 할 수 있다. 데이터 분석에 특화된 r언어가 많이 사용되고 있지만 판다스가 등장한 이후로 파이썬을 사용하는 경우가 증가하고 있다.
- 사물인터넷 분야에서도 리눅스기반 작은 커뮤터 라즈베리 파이를 작동할 수 있다.

---

2-3 할 수 없는 것.

- 리눅스 같은 운영체제,대단이 빠른 속도를 요구하거나 하드웨어를 직접 건드려야 하는 프로그램에는 어울리지 않는다.
- 파이썬은 구글이 가장 많이 애용하는 언어지만 파이썬으로 안드로이드 앱을 개발하는 것은 지원이 되긴하나 이것만으로 만들기 아직 역부족이며 아이폰 앱역시 할 수 없다.

---

2-4 설치

---

2-5 파이썬 실행 개요와 대화형 인터프리터

- 터미널로 파이썬 실행시 파이썬 대화형 인터프리터를 실행 할 수 있다. 입력하면 바로 출력으로 번갈아 이어지기 떄문에 대화하는 것처럼 느껴져 대화형 인터프리터라고 한다.이 파이썬 대화형 인터프리터를 Python shell이라고도 하며 3개의 꺾은 괄호를 프롬프트 라고한다.
- 파이썬은 대소문자를 구분한다. 예약어 사용에 있어 대소문자를 틀릴시 오류메시지를 확인할 수 있다.
- 예약어는 def,while 등 프로그래밍 언어에서 문법적인 용도로 사용하고 있는 단어를 말한다.
- 문장 실행후의 ‘...’은 문장이 끝나지 않았음을 의미하며 엔터키 입력시 문장이 종료되고 결과가 출력된다.

---

2-6 파이썬과 에디터

대화형 인터프리터ㅓ는 여러줄의 복잡한 소스 코드를 가진 프로그램을 만들기 적합하지 않고, 종료하자마자 프로그램이 사라진다는 단점이 있다. 그래서 프로그램을 만들때는 에디터를 사용한다.

파이썬을 설치하면 기본적이로 IDLE 에디터가 설치되는데 이를 사용해보자. IDLE는 통합 개발환경의 약자이다.

2-6-1 iDLE로 파이썬 프로그램 작성하기

2-6-2 비주얼 스투디오 코드

2-6-3 파이참.

가장 유명한 파이썬 에디터로써 자동완성 문법체크등의 필요 기능을 많이 제공하며 별도의 익스텐션이나 플러그인 설치가 필요없다.

---

1. 자료형
- 변수(variable)란 어떤 값을 갖는 하나의 저장공간이라 할 수 있다. 저장공간에 특정한 이름을 붙이고 값을 할당할 수 있다.
- 어떤 언어든 자료형을 알고 이해할 수 있다면 그 언어의 절반을 터득한 것이나 다름없다. 파이썬에서는  크게 숫자형, 문자형, 시퀀스 등이 있다.
- 계산 프로그램을 만들때 어떤 것을 계산할 것인가, 데이터 베이스 프로그램을 만들려면 어떤 자료부터 저장해야하는가. 등의 기본이라고 할 수 있다.
- 변수(variable) 어떤 값을 갖는 하나의 저장공간이라 할 수 있다. 저장공간에 특정한 이름을 붙이고 값을 할당할 수 있다.

3-1 숫자형

숫자 형태로 이루어진 자료형으로 파이썬에선 정수, 실수, 8진수, 16진수 등이 있다.

3-1-1 정수형

양의 정수와 음의정수. 정수(integer)를 뜻한다.

3-1-2 실수형

소수점이 포함된 숫자를 말한다.

```python
a = 1.2
a = 4.24E10, a= 4.25e10 #4.24 * 10^10
a = 4.24E-10, a = 4.24e-10 #4.24 * 10^-10
```

로우레벨에선 컴퓨터식 지수 표현방식인 floating point를 이용해 표현된다.

3-1-3 8진수(octal)와 16진수(hexadecimal)

```python
a = 0o177, 0O177 #숫자가 0o 또는 0O로 시작하면 된다.
```

```python
a = 0x8ff #숫자가 0x로 시작되면 된다.
```

3-1-4 숫자형을 활용하기 위한 연산자

`+`,`-`,`*`,`/`,`**`y제곱,`%`나머지 반환,`//`몫 반환

---

3-2 문자열 자료형

따옴표로 둘러 쌓여있으면 모두 문자열이라고 보면 된다.

```python
“life is too short”
“123”
```

3-2-1 문자열 만드는 법

1. 큰 따옴표” 로 둘러싸기
2. 작은 따옴표’로 둘러싸기
3. 큰따옴표 3개 양쪽으로 둘러싸기 “””
4. 작은따옴표 3개 양쪽으로 둘러싸기 ‘’’

왜 파이썬에서 문자열을 만드는 방법이 4가지나 될까?

문자열 안에 작은 따옴표나 큰따옴표를 포함시키고 싶을때 문제가 발생하게 된다.

`“sangdo’s house”`

`‘“sangdo” is good’`

단 백슬래시를 사용해도 문자열을 둘러싸는 기호가 아닌 문자그 자체를 뜻하기 때문에 해결할 수 있다. 하지만 깔끔하지 않다.

```python
'sangdo\'s house'
"\"sangdo\" is good"
```

3-2-2 여러줄인 문자열을 변수에 대입하기

1. 줄을 바꾸는 이스케이프 코드 `\n` 를 삽입한다
2. “””나 ‘’’로 감싼다.

```python
a = "sangdo\nbae"

or

a = '''
sangdo
bae
'''

or

a = """
sangdo
bae
"""

print(a)

#result 모두 같은 결과를 낸다.
#하지만 따옴표로 감싸는게 훨씬 깔끔하다

sangdo
bae
```

3-2-3 이스케이프 코드들

프로그래밍에 있어 미리 정의해 둔 “문자 조합”을 이스케이프 코드라 한다.

`\n`개행, `\t`문자열 사이 탭간격, `\\`백슬래시 문자로 표현, `\’`, `\”` 등은 활용 빈도가 높다.

`\r` 캐리지리턴 `\f` 폼피드 `\a` 출력시 삑소리 `\b` 백 스페이스 `\000` 널문자 등은 프로그램에서 잘 사용하지 않는다.

3-2-4 문자열 연산

다른 언어에서는 쉽게 찾을 수 없는 기능으로 파이썬에서는 문자열을 더하거나 곱할 수 있다. 우리생각을 그대로 반영해주는 파이썬만의 장점이라 할 수 있다.

- 문자열 더해서 연결하기 (Concatenation)

```python
a = "sangdo"
b = " bae"
a + b

result 'sangdo bae'
```

- 문자열 곱하기

```python
a = "sangdo"
a * 2

result 'sangdosangdo'
```

- 문자열 곱하기 응용

```python
print("=" * 50)
print("My Program")
print("=" * 50)

result #깔끔하게 출력가능.

==================================================
My Program
==================================================
```

- 문자열 길이 구하기

```python
a="sangdo bae"
len()
```

- 문자열 슬라이싱 및 인덱싱

파이썬은 0부터 숫자를 센다. 문자열에서 변수[번호]는 문자열 안의 특정 값을 뽑아 낼 수 있다. 번호는 띄어쓰기도 포함. 이를 `인덱싱`이라 한다.

```python
a = 'sang do'

result

a[0] -> 's'
a[5] -> ' '
```

음수도 가능하나 뒤에서 부터 샐때는 0이 적용되지 않는다.

-0과 0은 같기 떄문.

```python
a = 'sang do'

result

a[-2] -> 'd'
```

문자열에서 한 문자만을 `인덱싱`하는 것을 넘어 지정한 범위를 뽑아 내는 방법이 있는데, `슬라이싱(slicing)`기법이라고 한다.

```python
a = 'sangdo'
b = a[0] + a[1] + a[2]

#슬라이싱 기법
a[0:3] #0부터 3미만의 인덱스까지.

result
'san'

a[2:4]#2부터 4미만의 인덱스까지

result
'ng'

a[1:] #1부터 끝까지

result
'angdo'

a[:3]

result #0부터 3미만까지
a[:3]
```

음수를 사용할 수도 있다.

```python
a = 'sangdo'
a[1:-1] #1부터 -1미만 (-2)까지

result
'angd'
```

- 인덱스를 이용해 문자열 수정하기

```python
#불가

a = 'sangbo'

a[4] = 'd'
```

문자열 자료형은 그 요솟값을 변경할 수 없어 immutable(불변)한 자료형이라고도 한다.

```python
a[0:4] + 'd' + a[5]

result = 'sangdo'
```

이런 경우 슬라이싱을 활용할 수 있다.

---

3-2-5 문자열 포매팅

문자열 안의 특정한 값을 바꿔야 할 경우가 있을때 사용하는 것이 문자열 포매팅 기법이다.

- 숫자 대입

```python
"sangdo have %d dollars." % 3

result
'sangdo have 3 dollars.'
```

- 문자열 대입

```python
"sangdo have %s dollars." % "five"

result
'sangdo have five dollars.'
```

- 숫자 값을 나타내는 변수로 대입

```python
number = 3
"sangdo have %d dollars." % number

result
'sangdo have 3 dollars.'
```

- 두개 이상의 값 넣기

```python
number = 10
amount = "three"

"sangdo have %d dollars, he have %s stuffs" %(number, amount)
# % 뒤 괄호안을 콤마로 구분하여 각각의 값, 또는 변수를 적어주면 된다.
result
'sangdo have 10 dollars, he have three stuffs'
```

- 문자열 포맷 코드

%s(string, 문자열), %c(character, 문자1개), %d(decimal, 정수) %f(floating-point, 부동소수) %o(8진수) %x(16진수)

%%(리터럴 %, 문자 %자체)

- %s 포맷 코드는 자동으로 %뒤의 값을 문자열로 바꾸기 때문에 어떤 형태의 값이든 변환해 넣을 수 있다. %d,와 %f를 구분해줘야 하는 등과는 구별되는 차이.
- %%포맷 코드

```python
'rate is %d%.' %98
# 오류가 난다.

'rate is %d%%/' %98
#문자열 포매팅연산자 사용시 리터럴 %를 사용하기 위해서는 %%를 이용 해야한다.
```

3-2-6 포맷 코드와 숫자 함께 사용하기

지금까지는 %d, %s등의 포맷 코드를 값을 삽입하기 위해 사용했다. 하지만 %10d, %5s 등 숫자와 함께 사용할 수도 있다.

- 정렬과 공백

```python
'%10s' % 'hi'

result

'        hi' #전체 길이가 10개인 문자열 공간에서 hi는 오른쪽에 정렬된다.

'%-10s' % 'hi'

result

'hi        ' #전체 길이가 10개인 문자열 공간에서 hi는 왼쪽에 정렬된다.
```

- 소수점 표현

```python
"%0.4f" % 3.42134

result
'3.4213'
#소수점 4번쨰 자리까지 나타낸다.

"%10.4f" %3.42134

result
'    3.4213'
#전체 길이가 10개인 문자열 공간에서 소수점 4번쨰 자리까지 나타내고 오른쪽 정렬한다. 소수점도 공간차지'
```

3-2-7 format 함수를 사용한 포매팅

format 함수를 사용하면 좀 더 발전된 스타일로 문자열 포맷을 사용할 수 있다.

- 숫자 대입

```python
"sangdo have {0} dollars.".format(3)

result
'sangdo have 3 dollars.'
```

- 문자열 대입

```python
"sangdo have {0} dollars.".format("five")

result
'sangdo have five dollars.'
```

- 숫자 값을 나타내는 변수로 대입

```python
number = 3
"sangdo have {0} dollars.".format("five")

result
'sangdo have 3 dollars.'
```

- 두개 이상의 값 넣기

```python
number = 10
amount = "three"

"sangdo have {0} dollars, he have {1} stuffs".format(number, amount)
# 뒤 괄호안을 콤마로 구분하여 인덱스처럼 해당하는 변수나 값을 적어주면 된다.
result
'sangdo have 10 dollars, he have three stuffs'
```

- 이름으로 넣기

```python
"sangdo have {number} dollars, he have {day} stuffs".format(number=10, amount=3)
```

인덱스 대신 {변수}의 형태를 이용 할 수도 있다.

다만 format 함수의 인자에 변수 = value와 같은 형태의 값이 있어야 한다.

- 인덱스와 변수 혼용

```python
number = 3
"sangdo have {0} dollars, he have {day} stuffs".format(number, amount=3)
```

- 정렬

```python
"{0:<10}".format("hi")

result
'hi       ' #10개의 문자열 공간 왼쪽에 정렬

"{0:>10}".format("hi")

result
'       hi' #10개의 문자열 공간 오른쪽에 정렬

"{0:^10}".format("hi")

result
'    hi   ' #10개의 문자열 공간 중앙에 정렬
```

정렬 문자 `<,>,^` 바로 앞에 문자를 앞에 넣으면 공백대신에 지정한 문자값으로 채워 넣는 것도 가능하다.

```python
"{0:=<10}".format("hi")

result
"hi========"

"{0:!^10}".format("hi")

result
"!!!!hi!!!!"
```

- 소수점 표현

```python
y = 3.42134
"{0:0.4f}".format(y)#위의 0.4f 표현식과 같다.

result
'3.4213'

"{0:10.4f}".format(y)#위의 10.4f 표현식과 같다.
'     3.4213'
```

- `{` 또는 `}` 문자 표현하기

```python
"{{ and }}".format()

result
'{ and }'

#format 함수를 이용해 포매팅할때
#중괄호 brace문자를 사용하고 싶을때는 {{ }}처럼 두개를 연속한다.
```

3-2-7 f 문자열 포매팅

- 파이썬 3.6부터 f문자열 포매팅 기능을 사용할 수 있다.

```python
name = '배상도'
age = 25
f'나의 이름은 {name}입니다. 나이는 {age}입니다.'
#문자열 앞에 f접두사를 붙인다.

result
'나의 이름은 배상도입니다. 나이는 25입니다.'
```

f  문자열. 포매팅은 표현식을 지원한다.

```python
age = 25
f'나는 내년이면 {age+1}살이 됩니다.'

result
'나는 내년이면 26살이 됩니다.'
```

딕셔너리는 f문자열 포매팅에서 다음과 같이 사용한다.

```python
d= {’name’:'배상도.' ‘age’:25}
f’나의 이름은 {d[”name”]}입니다. 나이는 {d[”age”]}입니다.’

result
'나의 이름은 배상도입니다. 나이는 25입니다.'
```

- 정렬

```python
f'{"hi":<10}' # 왼쪽 정렬
f'{"hi":>10}' # 오른쪽 정렬
f'{"hi":^10}' # 가운데 정렬
```

- 공백 채우기

```python
f'{"hi":!<10}' # 왼쪽 정렬 공백 ! 체우기
f'{"hi":=^10}' # 가운데 정렬 공백 = 채우기
```

- 소수점 사용

```python
y=3.42134
f'{y:0.4f}'

result
'3.4213'

y=3.42134
f'{y:10.4f}'

result
'     3.4213'
```

- brace 사용

```python
f'{{ and }}'
```

3-2-8 문자열 관련 함수

문자열 자료형은 자체적으로 함수를 가지고 있다. 즉 문자열 내장 함수에 관해 알아보자.

```python
count()
a = "hobby”
a.count('b') -> 2

인덱스 반환 find() #해당 문자가 처음 나온 인덱스를 반환
#인자가 문자열에 존재하지 않으면 -1 반환
a.find('b')

인덱스 반환 index()
#find와 같으나, 인자가 문자열에 존재하지 않으면 오류

삽입 join()
",".join('abcd') -> 'a,b,c,d'

#인자가 되는 문자열에 .join앞의 문자열을 넣는다.
#리스트나 튜플에도 사용할 수 있다.

",".join(['a','b','c','d']) -> 'a,b,c,d'

소문자 대문자 변환 upper()
b = a.upper() -> 'HOBBY'

대문자 소문자 변 lower()
b.lower() -> 'hobby'

문자열 중 해당 방향 첫번째로 있는 한칸이상 연속된 공백제거
lstrip, rstrip, strip(양쪽)
a = " hobby "
a.lstrip() -> "hobby " a.rstrip -> " hobby"
a.strip() -> "hobby"

문자열 바꾸기 replace()
#앞에선 슬라이싱으로 특정 인덱스를 바꿨는데 특정 문자열을 바꾸는 내장함수도 있다.

a = "sangdo's hobby is playing game"
a.replace("playing game","programming.")
-> "sangdo's hobby is programming."

문자열 나누기 split()
#괄호안에 인자를 넣어주지 않으면 공백(스페이스 텝 엔터)
#를 기준으로 문자열을 나누어 준다. 특정 문자열을 넣어주면
#괄호 안의 값을 구분자로 해서 문자열을 나누어 리스트로 반환해준다.

a.split() -> ["sangdo's",'hobby', 'is', 'programming']
```

자주쓰는 문자열 내장함수 count, find, index, join, strip, replace, split, upper, lower에 대해 알아보았다.

3-3 리스트 자료형

- 지금까지 우리는 숫자와 문자열에 대해 공부했다. 각자 여러 방식의 숫자나 문자열 모음을 포함하는 리스트 자료형에 대해 알아보자.
- 리스트는 아무것도 포함하지 않아 비어있을 수도 있고, 숫자나 문자열 또는 리스트자체까지 요솟값으로 가질 수도 있다.

```python
a=[]
b=[1, 2,['life', 'is']]
```

3-3-1 리스트 인덱싱과 슬라이싱

- 리스트도 문자열처럼 인덱싱과 슬라이싱이 가능하다. 리스트 인덱스도 문자열과 마찬가지로 첫번쨰 요솟값은 인덱스 0부터 시작한다.
- 마찬가지로 인덱스 -1은 마지막 문자열을 가리킨다.
- 숫자 요소 인덱스 끼리의 덧셈은 숫자 연산 결과를 반환한다.
- 문자열끼리, 숫자형끼리의 덧셈은 된다. 문자열로 선언된 숫자도 문자열끼리의 덧셈을 할 수 있다.

```python
a = [1,2,3,4]

a[0] -> 1

a[-1] -> 4

a[0] + a[1] -> 3

```

- 이중, 삼중 리스트에서의 인덱싱.

```python

a = [1, 2, ['a', 'b', ['c', 'd']]]
a[2][2][0] -> 'c'
a[2][0] -> 'a'
```

- 리스트에서의 슬라이싱.

```python
a = "12345"
a[0:2] -> '12'

a = [1, 2, 3, 4, 5]
a[0:2] -> [1,2]

#문자열에서의 완전히 슬라이싱과 동일하다
```

- 중첩된 리스트에서 슬라이싱

```python
a = [1,2,['a','b','c'],3]
a[2:4] -> [['a','b','c'],3]
a[2][:2] -> ['a','b']
```

3-3-2 리스트 연산

- 더하기

```python
a = [1, 2, 3]
b = [4, 5, 6]

a + b -> [1,2,3,4,5,6]

#문자열에서
"123" + "456"이 "123456"이 되는 이치와 같다.
물론 콤마 안 숫자는 문자형 자료형으로 인식되지만.

```

- 곱하기(반복, *)

```python
a = [1,2,3]

a * 2

a -> [1,2,3,1,2,3]
```

- 길이 구하기

```python
a = [1,2,3]

len(a) -> 3

#len은 튜플과 딕셔너리에서도 사용하는 함수이다.
```

- 발생할 수 있는 연산 오류들

```python

#오류체크
a = ['a',1,'2',3,'b',3.4]

b = a[0]+a[4]
print(b) -> ab

#c = a[0]+a[1] cannot concatenate 'str' and 'int' objects
#print(c) concatenate 사슬처럼 있다

d = a[1]+a[5]
print(d) -> 4.4 #float 되네잉

#e = a[1]+a[4]
#print(e)TypeError: unsupported operand type(s) for +: 'int' and 'str'

f = a[0]+a[2]
print(f) -> a2

#이렇게하면 자료형 연산오류를 없앨 수 있다.
#문자형이라고 연산결과에 따옴표가 생기지는 않는다.
g = a[0]+str(a[1]) -> a1
```

3-3-3 리스트의 수정과 삭제

- 리스트 수정

```python
#리스트 인덱스로 간단히 수정할 수 있다.
#문자열 자료형이 (immutable)해서 슬라이싱 이용 수정했던 것과 대조됨.

a = [1, 2, 3]

a[2] = 4

a -> [1, 2, 4]
```

- 리스트 삭제

```python
#del 함수 이용
a = [1, 2, 3]
del a[1]
a -> [1, 3]
```

- 리스트 관련 함수

요소추가 append()

```python
#리스트의 마지막에 인자를 추가한다.

a = [1,2,3]

a.append(4)

a -> [1, 2, 3, 4]

#case 2 리스트 자체를 append 할 수도 있다.

a.append([5,6])

a -> [1, 2, 3, 4, [5, 6]]

#case 3 error name 'b' is not defined

a.append(b) #문자열b가 아닌 변수b로 인식하기 때문에
a.append('b')#문자열 b를 어펜드 하고 싶으면 이렇게 해야한다.
```

정렬 sort()

```python
#리스트 요소를 순서대로(오름차순) 정리해준다.
a = [1, 4, 3, 2]

a.sort()

a -> [1, 2, 3, 4]

#문자열에 대해서도 가능.
a = ['a','c','b']

a.sort()

a -> ['a','b','c']
```

뒤집기 reverse()

```python
#현재 리스트의 순서를 역순으로 바꾼다.(내림차순 정렬아님)

a = ['a', 'c', 'b']

a.reverse()

a -> ['b', 'c', 'a']
```

위치반환 index()

```python
#인자에 해당하는 요소가 리스트에 있으면 해당 요소의 인덱스를 반환한다.
#만약 없는 요소를 인자로 넣는다면 ValueError 발생.

a = [1,2,3]

a.index(3) -> 2

```

리스트 요소 제거 remove()

```python
#인자에 해당하는 요소중 제일 앞의 인덱스를 가진 요소를 제거.

a = [1, 2, 3, 1, 2, 3]

a.remove(3)

a -> [1, 2, 1, 2, 3]

#해당 인덱스를 가진 요소를 제거하는 del을 다시생각 해보자.
del a[0]

a -> [2, 1, 2, 3]
```

리스트 팝 pop()

```python
#맨 마지막 요소를 리턴하고 그 요소는 삭제한다. stack
a = [1, 2, 3]
a.pop() -> 3

a -> [1,2]

#인자에 해당하는 인덱스 요소를 리턴하고 그 요소를 삭제한다.

a.pop(0) -> 1

a -> [2]
```

리스트에 포함된 해당 요소 x의 개수 세기 count()

```python
# 리스트안에 포함된 인자에 해당하는 요소의 개수를 반환해준다.
a = [1,2,3,1]

a.count(1) -> 2
```

리스트 확장 extend()

```python
#리스트를 인자로하며 원래의 리스트에 인자리스트의 요소를 더하게 된다.
a = [1,2,3]

a.extend([1,2])

a -> [1,2,3,1,2]

# 변수 += 리스트와 동일한 결과를 낸다.
b = [6,7]

b.extend(a)

b -> [6,7,1,2,3]

b += a

b -> [6,7,1,2,3,1,2,3]

# b -= a 는 안 된다.
```

- append, sort, reverse, index, insert, remove, pop, count, extend, Len(리튜딕 시퀀스 모두 사용) 기억할 것.

3-4 튜플 자료형

리스트와 같은 시퀀스 자료형이나 차이점이 있다.

- 리스트는 값의 생성, 삭제, 수정이 가능하지만 튜플은 불가능하다. 그 외에는 완전히 동일하다. 프로그램이 실행되는 동안 값이 항상 변하지 않기를 바랄때 튜플을 사용한다. 일반적으로는 변경되는 형태의 변수가 훨씬 많기에 프로그래밍에서는 리스트의 활용도가 더 높다.
- 튜플은()로 둘러싼다. parentheses
-

```python
#한번 선언하면 삭제, 변경할 수 없다.
t1 = (1, 2, 'a')

del t1[0]

TypeError: 'tuple' object doesn't support item deletion

#

t1[0] = 'b'
TypeError: 'tuple' object does not support item assignment
```

3-4-1 튜플의 형태

```python
#빈 튜플
t1 = ()
#1개의 요소만을 가질때는 반드시 요소뒤에 콤마를 붙인다.
t2 = (1,)
#일반적 튜플
t3 = (1,2,3)
#소괄호parentheses를 생략해도 무방하다.
t4 = 1,2,3
#다중 튜플
t5 = (1,2,3,(1,2))
```

3-4-2 튜플 다루기

```python
#인덱싱
t1 = (1,2,'a')
t1[0] -> 1
t1[2] -> 'a'

#슬라이싱
t1[1:] -> (2,'a')

#연산
t2 = ('b',)

t1 + t2 -> (1,2,'a','b')

#
t2 * 3
('b','b','b')

#튜플 길이 구하기 len()
len(t1) -> 3
```

3-5 딕셔너리 자료형

5.리스트

원소들이 연속적인 형태로 저장되는 형태의 자료형이며

저장 요소들이 모두 같은 자료형 일 필요는 없다.

안에 0개 이상의 원소가 저장가능하며

튜플과 마찬가지로 또다른 리스트를 원소로 가질 수도 있다.

리스트 내부함수로는

해당 리스트에 저장된 원소를 오름차순으로 정렬해주는 sort

해당 리스트에 저장된 원소의 순서를 정반대로 뒤집어주는 reverse

해당 리스트 맨 마지막 위치에 전달 받은 데이터를 추가해주는 append 함수가 있다.

ex.

```python
exlist= [ 2 , 3, 1]

exlist.sort()

result [1, 2, 3]
```

```python
exlist.reverse()

result [1, 3, 2]
```

```python
exist.append(4)

result [2, 3 , 1 , 4]
```

```python
del exlist[0]

result [3, 1]
```

6.인터프리터와 컴파일러

컴퓨터는 0과 1로 정보를 표현하는데 이떄의 언어를 기계어라고한다.

니모닉스를 활용하는 언어를 어셈블리어라고 하고

이 둘을 저급언어라 한다.

사람의 언어에 더 가까운 프로그래밍 언어들을 고급언어라 한다.

사람언어에 가깝게 만들었기떄문에 다시 기계어로 번역을 해줘야하는데

라인 하나씩 실행하며 해석해주는 방식을 인터프리트라고 하고.

ex.  파이썬 셸

처음 부터 끝까지 읽고 해석해주는 방식을 컴파일 이라고 한다.

1. 파이썬의 설치와 실행

python org에서 배포하는 일반적인 배포판과

과학 계산용으로 널리 사용되는 파이썬 패키지들을 쉽게 관리할

수 있는 아나콘다 배포판도 있다. 데이터 분석및 머신러닝에

 사용된다 .

기본 코드는 파이썬 버전에 따라서 달라지는 부분이 없으나 여러가리

파이썬 패키지를 추가로 설치 사용할때는 파이썬 버전을 맞춰야 할 떄가 있는데, 그럴떄 파이썬 가상환경을 활용하면 파이썬 버전을 다르게 할 수 있다.

`conda create -n (환경이름) python=(파이썬버전)`

하면 아나콘다 밑 envs fㅏ는 곳에 환경이름에 해당하는 환경이 해당 파이썬 버전으로 만들어진다.

그다음에 만들어진 환경으로 이동하고싶으면

`conda activate ( 환경이름)` 하면 앞에 베이스가 환경이름 으로 바뀐다.

기본으로 다시 돌아가려면 `conda deactivate` 하면된다.

1. 파이썬 인터프리터

대화식 사용. (커맨드 셸)

실제 프로그래밍을 할때는 idle에서 파일형태로 만들어 두었다가 사용한다. 파이썬은 들여쓰기로 영역을 구분하기 때문에 들여쓰기를 잘 지켜줘야한다.

터미널로 파이썬 설치폴더로 찾아가 >python (파일디렉토리)를 입력하는 식으로도 프로그램 전체를 번역하며 실행할 수 있다.

2. 제어구조

분기와 반복을 파이썬에서 어떻게 사용하는가?

1. while 사용 반복문

```python
num = 0

while num ≤ 100:

print(num)

num = num + 1
```

-1

`a= input()`등으로 변수값을 입력 받을 수 있다.

-2

round()는 반올림을 해주는 함수다.

`round(1.2345, 2) → 1.23`

`round(1.2345, 3) → 1.235`

1. 조건문(if-elif-else)

```python
if a < 0:

elif a == 0:

else:
```

%는 나머지 계산이고 나머지를 반환한다. //는 몫 반환.

-1 조건에 따라 반복문 중단하기

```python
while True:

a= int(input())

if a > 0 :

break
```

1. for을 사용하는 반복문

파이썬에서 포문은 리스트와같은 시퀀스(sequence)를 이용해 원하는 명령어를 반복할떄 쓰인다.

```python
x=[’ab’,’abc,’abcd’]

for x in exalist:

print(x, len(x))
```

-1 range()

```python
list(range(2,7)) #2이상 7미만 리스트를 만들어라.

result [2,3,4,5,6]
```

```python
for I in range(2,7):

print(i)
```

-2 split()

**문자열.split()**

`split(sep='구분자', maxsplit=분할횟수)`

구분자를 기준으로 문자열을 구분해 리스트를 만들어준다.

스플릿 메소드를 사용해 문자열을 분할할 수 있다.

ex)

```python
‘0 100’.split()

result [’0’, ‘100’]
```

1. 함수

반복적인 코드를 줄이면서 사용하기 좋게 정리할 수 있다.

-1

```python
len([1, 2, 3, 4, 5)

result = 5
```

-2

```python
def boy():

print(”소년”)
```

이런식으로 직접 함수를 작성할 수도 있다.

또는 누군가가 만든 함수를 얻어 쓸 수도 있을 것이다.

-3

이런 식으로 `print(m, ‘*’, n, '=', m*n)`

출력시 함수의 인자가 너무 많다면

파이썬 3.6버전 이상부터 f-문자열을 사용할 수 있다.

```python
m=2

n=1

print(f’{m} * {n} = {m*n}’)
```

1. 반환문

print 로 결과를 출력하는 걸 넘어서. 함수를 실행하면 결과값을 남긴다. y=x라는 일반적 수학 함수처럼.

```python
def f1(x):

return y

c=f1(10)

print(c)

result 10
```

```python
def quiz():

ans =input(’1 + 1 =  ‘)

return 1+2 == int(ans)

result는 true나 false둘중 하나로 반환된다.
```

1. 지역변수와 전역변수

전역 변수는 함수 밖에서, 파일 전역적으로 영향을 미친다.

지역변수는 함수안에서, 함수의 종료시까지만 영향을 미친다.

```python
a= 1

def f1():

a=10
```

일떄 f1안에서는 a=10이 새로 선언되고 종료되는 것과 다름없다.

6.람다

-1 lambda 매개변수 : 표현식

함수를 딱 한줄로 만들게 해주는 형식이다.

```python
def hap(x, y):

	return x + y
```

를

`(lambda x,y: x+y)(10,20)`

으로 한줄로 간단하게 표현가능하다.

-2 map(함수, 리스트)

이 함수는 함수와 리스트를 인자로 받는다.

그리고 리스트로부터 원소를 하나씩 꺼내 함수를 적용시킨 다음 결과를 새로운 리스트에 담아준다.

`list(map(lambda x: x ** 2, range(5)))`

result [0,1,2,3,4]라는 리스트를 생성

[0,1,4,9,16]으로 구현해준다.

-3 reduce(함수, 시퀀스)

시퀀스란(문자열,리스트,튜플)을 말한다.

시퀀스의 원소들을 누적해서 함수에 적용시킨다.

```python
from functors import reduce

reduce(lambda x,y: x+y, [0,1,2,3,4])

result 10
```

리스트를 전부 sum한 것과 같다.

```python

reduce(lambda x,y: y+x, ‘abcde’)

result ‘edcba’
```

역순한 것과 같다.

-4 filter()

filter(함수, 리스트)

파이썬의 필터이다. 리스트에 들어있는 원소들을 함수에 적용시켜,

true인 값들로 새로운 리스트를 만들어준다.

```python
list(filter(lambda x: x<5, range(10)))

result[0,1,2,3,4]
```

```python
list(filter(lambda x: x<5, range(10)))

result[0,1,2,3,4]
```

```python
list(filter(lambda x: x% 2, range(10)))

result [1, 3, 5, 7, 9]

결과값이 1 true인 것.
```

1. 데이터 타입.

-1 자료형

컴퓨터 내부에서는 모든 정보를 이진수로 처리한다. 숫자 뿐만아니라

문자라든지 아무리 복잡한 정보도 이진수로 처리한다.

예를 들어 알파벳 a는 아스키코드 규칙에 따라 숫자 65로 표현한다.

그렇다면 숫자 65와 알파벳 a를 컴퓨터는 어떻게 구분할까?

그것을 표시해주는 것이 자료형이라고 할 수 있다.

파이썬은 자동으로 자료형이 정해지나 프로그래밍 언어마다 프로그래머가 직접 정해줘야 하는 경우도 있다.

—1 type()

타입함수로 자료형을 확인할 수 있다.

```python
type(6)

result <type ‘int’>
```

```python
type(’A’)

result <type ‘str’>
```

파이썬의 자료형은 숫자, 시퀀스, 매핑으로 크게 나눌 수 있다.

—2 숫자

숫자를 나타내는 자료형으로는

`type(10)`

정수(int)

`type(2.8)`

부동소수점수(float)

`type(3+4j)`

복소수(complex)가 있다.

—3 시퀀스

`type(”python”)`

<class ‘str’>

문자열(str)

`type([’1’, ’2’, ’3’])`

<class ‘list’>

리스트(list)

`type(’1’, ‘2’, ‘3’)`

<class ‘tuple’>

튜플(tuple)

사용자 정의 클래스

가 시퀀스에 속한다.

— 문자열 슬라이싱

아래와 같이 문자열 인덱스를 이용해 문자열의 일부를 복사할 수 있습니다.

```python
`p=’Python’`

`p[0:2]`

result ‘Py’

`p=[:2]`

result ‘Py’

#시작 인덱스가 0일떄는 콤마 앞의 0을 생략할 수도 있다.

`p[-2:]`

result ‘on’

#음수 인덱스를 사용해 문자열의 뒷부분을 복사 할 수도 있다.

`p[:]`

result ‘Python’

#콤마 앞뒤 숫자를 모두 생략하면 문자열 전부를 복사할 수 있다.

`p[::-1]`

result ‘nohtyP’

#역순으로 복사할 수도 있다.
```

—4 매핑

딕셔너리(dict)는 키와 값으로 이루어지는데 이런 것을 매핑이라 한다.

```python
type({’one’:1, ‘two’:2, ‘three’:3})

<class ‘dict’>
```

—5 불

참 거짓을 표현하는 불.

```python
type(False)

<class ‘bool’>
```

—6 세트

집합을 표현하는 세트

```python
fruits= {’apple’, ‘banana’, ‘orange’}

집합으로서의 특성이 있으며 집합 연산을 사용할 수 있다.

세트는 원소의 순서가 유지되지 않고 중복원소를 갖지 않음

fruits.add(’mango’)

result fruits={’apple’, ‘banana’, ‘mango’, ‘orange’}
```

```python
set1= set() 이런식으로 빈세트를 선언할 수도 있다.

set1 & set2 교집합

set1 | set2 합집합

set1-set2 차집합
```

```python
alphabet = list(’google’)

result [’g’, ‘o’, ‘o’, ‘g’, ‘l’, ‘e’]

set(alphabet)

result {’e’, ‘o’, ‘g’, ‘l’}
```

지금까지 데이터타입. 자료구조를 다루었다.

자료구조는 cpu내의 기억장소에서부터 크게는 파일, 데이터베이스, 전체 시스템에까지 두루 적용된다.

1. 모듈

여태껏 자급자족 하는 법이였다면

import를 활용해 남이만들어 놓은 부품을 가져다 활용할 수도 있다.

파이썬 뿐만 아니라 대부분의 언어에서 이런식으로 좋은 기능들을 묶어 모듈이나 라이브러리로 제공한다.

—1.math

```python
import math

math.sqrt(2)

result 1.41421345...
제곱근을 float으로 반환한다.

math.pi

result 3.141592653

math.pow(x,y)함수. x의 y승을 반환한다.

반환형은 언제나 float 타입이며 정수타입 계산을 원한다면 **를 사용하면 된다.
```

—2.calendar

```python
import calendar

calendar.prmonth(2013,7)

result

July 2013
Mo Tu We Th Fr Sa Su
1  2  3  4  5  6  7
8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30 31
```

—3.tkinter

-2 파이썬에서 임포트 하는 방법에는 두가지가 있다.

—1 첫번째 방법은 모듈 전체를 가져오는 방법이다.

모듈내 함수를 사용하기 위해서는 모듈.변수 형식으로 써주어야한다.

```python
import tkinter

tkinter.widget = tkinter.Label(None, text=’I love Python!’)

tkinter.widget.pack()
```

—2 두번쨰 방법은 모듈 내의 함수를 콕찍어 가져오는 방법이다.

```python
**from** tkinter **import** *
widget = Label(**None**, text='I love Python!')
widget.pack()
```

이 예에서는 *로 전부를 가져 왔다.

이렇게하면 모듈.함수가 아닌 함수명만 적어도 함수사용이 가능하다.

```python
Label = ‘This is a Label’

from tkinter import *

Label

result <class ‘tkinter.Label’>
```

아래의 예에서 문자열이 었던 label이 임포트 문 실행 후 tkinter의 label로 바뀌어버렸다.

—3 del 모듈

필요없는 모듈은 del 모듈로 지워주면 된다.

—4 모듈 재적재

```python
from importlib import reload

reload(모듈)
```

한 번 임포트한 모듈을 다시 불러올떄는 위와 같이 다시 로드 할 수 있다.

—`dir(모듈)`

모듈안에 어떤 내부 모듈들이 있는지 확인할 수 있다.

—모듈안에 특정 문자열 포함하는 모듈 찾기

`[x for x in dir(모듈) if ‘leap’ in x]`

모듈안에서 leap이라는 문자열을 포함하는 이름을 찾을 수 있다.

—`help(모듈.함수)`

함수의 사용법을 확인 할 수 있다.

—round 함수. 반올림해서 반환해줌

—`sys 모듈`

파이썬 인터프리터의 디폴트 프롬프트는

```python
>>>이다.

import sys

sys.ps1 = ‘^^; ‘

를 해주면 디폴트 프롬프트가 ^^; 으로 바뀐다.

sys.exit()하면 인터프리터 종료.
```

—os 모듈

운영체제를 제어할 수 있다.

```python
import os

-os.getcwd()

get current working directory의 약자이다.

-os.listdir()

cwd에 어떤 파일들이 있는지 보여준다.

-os.chdir(하위디렉토리)

하위디렉토리로 이동

-os.chdir(’..’)

상위 디렉토리로 이동.
```

—re 모듈

정규 표현식을 이용해 문자열을 다룬다.

```python
import re, glob

p = re.compile(’.*p.*n.*’)

for i in glob.glob(’*’):

m= p.match(i)

if m:

print m.group()

result

pycon.ico

python.exe

pythonw.exe

w9xpopen.exe
```

(.)는 임의의 문자

(*)는 0개 이상의 문자.

즉 현재 디렉토리에서 p다음 n이 나오는 이름을 가지고 있는 파일을 찾아준다.

-`sub()함수`

re.sub（정규 표현식, 대상 문자열 , 치환 문자)

import re

s=re.sub(’[:,\.]’, ‘’)

콜론, 쉼표, 마침표 제거.

—`webbrowser 모듈`

```python
import webbrowser

url=’http://www.python.org/’

webbrowser.open(url)
```

—`random 모듈`

```python
import random

random.random()

0이상 1미만의 숫자중 하나를 반환한다.

radom.randrange(1,7)

1이상 6이하의 숫자 하나를 반환한다.

shuffle()함수는 시퀀스를 뒤죽박죽으로 섞어놓는 함수이다.

abc = [’a’, ‘b’, ‘c’, ‘d’, ‘e’]

random.shuffle(abc)

하면 리스트의 순서가 바뀐다.

random.choice(abc)

하면 시퀀스 abc중 원소 하나를 뽑아 반환해준다.

ex)random.choice([True,False])
```

8.파일 다루기.

파일을 복사하고 지우는일 (os모듈,shutil모듈)을 넘어서 파일의 내용을 읽고 쓰는 방법을 알아보자.

-read()

```python
f = open(’C:\\python_newbie\\Python_for.txt)

f.read()
```

해당 디렉토리의 txt파일을 열어 f라는 이름을 붙어주고 read함수로 읽는다.

다만 read함수는 \n등의 개행문자도 그대로 리턴해주기 때문에

```python
buffer = f.read()

print(buffer)
```

이런 식으로 쓰면 개행이 번역된 프린트를 볼 수 있다.

-write()

```python
f = open('C:\\python_newbie\\letter.txt', 'w')

파일의 데이터를 읽기만 했을떄와는 달리, 파일에 데이터를 쓰려고 할떄는 미리 파일에 데이터를 쓰겠다고 표시해줄 필요가 있다.

f.write(’Dear Father,’)

f.close()
```

지정된 디렉토리에 letter.txt가 생겼음을 확인 할 수 있다.

close로 닫는 작업까지 해줘야 써준 글자가 고스란히 써진다.

다만 w모드로 파일을 오픈하게 되면 원래 있던 데이터가 없어져 버린다.

데이터를 지우지 않고 내용을 추가하려면 `open(’dir’, ‘a+’)`로 열어야한다.

—라인 한줄씩 다루기.

```python
import os

os.getcwd()

os.listdir()

f = open(’LICENSE.txt)

‘A. HISTORY OF THE SOFTWARE\n’
```

f.readline()을 대화형 인터프리터에 계속 쳐가면

‘\n’ 개행문자까지 한줄 씩 다음 줄을 읽는다.

```python
for x in range(5):

f.readline()
```

으로 원하는 수의 라인을 읽을 수도 있다.

```python
f= open(’LICENSE.txt’)

lines = f.readlines()

lines[:2]
```

여기서는 readline 함수가 아닌 readlines를 활용했다.

readlines를 활용하면 한줄 한줄이 각각의 리스트 원소로 들어간다.

```python
for l in lines[26:41]:

print(l, end=’’)
```

이를 활용해 이런식으로로 원하는 라인만 출력할 수 있다.

-대문자로 변환.

`s = s.upper()`

-리스트 문자열 합치기.

```python
abc=[’A’, ‘B’, ‘C’]

str1 = ‘구분자‘.join(abc)
```

---

참고문헌

1. 점프투 파이썬

출판사 이지스 퍼블리싱

저자 박응용

위키독스 : [https://wikidocs.net/book/1](https://wikidocs.net/book/1)

1. 왕초보를 위한 Python: 쉽게 풀어쓴 기초 문법과 실습

저자 : 최용

위키독스 : [https://wikidocs.net/book/2](https://wikidocs.net/book/2)

위키독스로 무료로 공개된 두 자료를 활용하여 공부하고 정리 요약하였습니다.